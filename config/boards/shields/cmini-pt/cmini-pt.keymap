#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
#define QWERTY 0
#define NAV 1
#define MOUSE 2
#define NUM 3
#define SYS 4


#define UNDO LC(Z)
#define REDO LC(Y)
#define COPY LC(C)
#define CUT LC(X)
#define PASTE LC(V)

#define P_ESC 0
#define P_Q 1
#define P_W 2
#define P_E 3
#define P_R 4
#define P_T 5
#define P_Y 6
#define P_U 7
#define P_I 8
#define P_O 9
#define P_P 10
#define P_BSPC 11
#define P_TAB 12
#define P_A 13
#define P_S 14
#define P_D 15
#define P_F 16
#define P_G 17
#define P_H 18
#define P_J 19
#define P_K 20
#define P_L 21
#define P_SEMI 22
#define P_SQT 23
#define P_CAPS
#define P_Z 25
#define P_X 26
#define P_C 27
#define P_V 28
#define P_B 29
#define P_N 30
#define P_M 31
#define P_COMMA 32
#define P_DOT 33
#define P_FSLH 34
#define P_BSLH 35

#define P_NAV 36
#define P_MOUSE 37
#define P_SYS 38
#define P_NUM 39

#define KEYS_L P_ESC P_Q P_W P_E P_R P_T P_TAB P_A P_S P_D P_F P_G P_CAPS P_Z P_X P_C P_V P_B 
#define KEYS_R P_Y P_U P_I P_O P_P P_BSPC P_H P_J P_K P_L P_SEMI P_SQT P_N P_M P_COMMA P_DOT P_FSLH P_BSLH 
#define THUMBS P_NAV P_MOUSE P_SYS P_NUM

#define COMBO_TIMEOUT 200
#define MACRO_TAP 10
#define MACRO_WAIT 0
&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&lt { 
    flavor = "tap-preferred";
    tapping-term-ms = <125>;
    quick-tap-ms = <185>; 
};

/{

  trackpad_peripheral_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackpad>;
        layers = <QWERTY NAV MOUSE NUM SYS>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_WHEEL>;
        y-input-code = <INPUT_REL_MISC>;
        bindings = <&ib_wheel_scaler 1 8>;
   }; 

    ib_wheel_scaler: ib_wheel_scaler {
            compatible = "zmk,input-behavior-scaler";
            #binding-cells = <2>;
            evt-type = <INPUT_EV_REL>;
            input-code = <INPUT_REL_WHEEL>;
    };

  trackball_peripheral_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <QWERTY NAV NUM SYS>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
   };

   trackball_peripheral_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <MOUSE>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_HWHEEL>;
        y-input-code = <INPUT_REL_WHEEL>;
   };

   combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <P_W P_R>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <P_U P_O>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <P_S P_F>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <P_J P_L>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <P_X P_V>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <P_M P_DOT>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <P_B P_N>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        slash {
            bindings = <&kp FSLH>;
            key-positions = <P_G P_H>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <P_T P_Y>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        copy {
            bindings = <&kp COPY>;
            key-positions = <P_X P_C>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        paste {
            bindings = <&kp PASTE>;
            key-positions = <P_C P_V>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <P_W P_E>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <P_E P_R>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <P_S P_D>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <P_D P_F>;
            timeout-ms = <80>;
            require-prior-idle-ms = <125>;
        };
    };

    behaviors {
        lh_hmsf: left_hand_homerow_mods_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;                       
            quick-tap-ms = <125>;
            global-quick-tap;     
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };

        rh_hmsf: right_hand_homerow_mods_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;                       
            quick-tap-ms = <125>;
            global-quick-tap;       
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };

        lh_hmctrl: left_hand_homerow_mods_control {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS_CONTROL";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";    
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };

        rh_hmctrl: right_hand_homerow_mods_control {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS_CONTROL";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";       
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };

        lh_hmgui: left_hand_homerow_mods_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS_GUI";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };

        rh_hmgui: right_hand_homerow_mods_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS_GUI";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };ks
    };


    keymap {
        compatible = "zmk,keymap";

        qwerty {
            label = "QWERTY";
            bindings = <
                &kp GRAVE   &kp Q  &kp W  &kp E  &kp R  &kp T               &kp Y  &kp U  &kp I     &kp O   &kp P    &kp BSPC
                &kp LSHIFT &lh_hmgui LGUI A  &lh_hmgui LALT S  &lh_hmctrl LCTRL D  &lh_hmsf LSHIFT F  &kp G               &kp H  &rh_hmsf RSHIFT J  &rh_hmctrl RCTRL K     &rh_hmgui LALT L   &rh_hmgui RGUI SEMI &kp SQT
                &caps_word &kp Z  &kp X  &kp C  &kp V  &kp B               &kp N  &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                        &lt NAV SPACE  &lt MOUSE TAB                       &lt SYS BSPC  &lt NUM ENTER
            >;
        };

        nav {
            label = "NAV";
            bindings = <
                &sys_reset  &trans &trans &trans &trans &kp DEL                &kp UNDO &kp CUT &kp COPY &kp PASTE &kp REDO &trans
                &trans  &kp LGUI &kp LALT &kp LCTRL &kp LSHIFT &kp BSPC      &kp CAPS &kp UP &kp LEFT &kp RIGHT &kp DOWN &trans
                &trans  &trans &trans &trans &trans &kp ENTER       &mkp MCLK &mkp LCLK &mkp RCLK &mkp MB4 &mkp MB5 &trans
                                             &trans  &trans                &kp BSPC &kp ENTER
            >;
        };

        mouse {
            label = "MOUSE";
            bindings = <
                &sys_reset  &trans &trans &trans &trans &kp DEL                &kp UNDO &kp CUT &kp COPY &kp PASTE &kp REDO &trans
                &trans  &kp LGUI &kp LALT &kp LCTRL &kp LSHIFT &kp BSPC      &kp CAPS &kp UP &kp LEFT &kp RIGHT &kp DOWN &trans
                &trans  &trans &trans &trans &trans &kp ENTER       &mkp MCLK &mkp LCLK &mkp RCLK &mkp MB4 &mkp MB5 &trans
                                             &trans  &trans                &kp BSPC &kp ENTER
            >;
        };


        num {
            label = "NUM";
            bindings = <
                &trans  &kp LBKT &kp N7 &kp N8 &kp N9 &kp RBKT             &trans  &bt BT_PRV &bt BT_CLR &bt BT_NXT &sys_reset &sys_reset
                &kp CAPS  &kp SQT &kp N4 &kp N5 &kp N6 &kp EQUAL          &trans  &kp RSHFT &kp RCTRL &kp LALT &kp RGUI &trans
                &trans  &kp GRAVE &kp N1 &kp N2 &kp N3 &kp MINUS           &trans  &trans &trans &trans &trans &trans
                                             &kp DOT &kp N0                &trans &trans
            >;
        };

        sys {
            label = "SYS";
            bindings = <
                &trans  &kp LBRC &kp AMPERSAND &kp ASTERISK &kp LPAR &kp RBRC             &trans  &out OUT_USB &out OUT_TOG &out OUT_BLE &trans &sys_reset
                &kp CAPS  &kp DQT &kp DOLLAR &kp PERCENT &kp CARET &kp PLUS          &trans  &kp RSHFT &kp RCTRL &kp LALT &kp RGUI &trans
                &trans  &kp TILDE &kp EXCL &kp AT &kp HASH &kp UNDER           &trans  &trans &trans &trans &trans &trans
                                             &kp LPAR &kp RPAR                 &trans &trans
            >;
        };
    };
};
 
